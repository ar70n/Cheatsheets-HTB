p = 161769150025200643055118087747503168327219483817391982223242044740811547829751306297749864500246207164062013601624654315310707219443610857484866065629178428529481210701738835386872446168433410731185090911884029802715788774934997000472087997163146396595556760398786639932167409502356632448946983708605262450543
q = 167635934350618493664580625764036294115624149555082152361773239386052060425576251240955847430437860198712058210027385879145653228601807121379237675092526643830216402145539094466880183247720296531507977649614645839168078619623348209391915120879289001873086459153611591849967433302511221661305604275259261017861
r = 167825749296165710897578737261894173443805074950800190199571284189482040555264239732183021677660703942934580339669006554937955428479697432215948482353996120549682126538883823008887323406531765941480728259355799742262742338877562830406245051818430438100722429037225262134589670999662155401475471513741652348741
n = 27118322613579889039180738563527180653024995710543496860973063831594615613135376564605023316403614939256410486863338187647917389765119431957944043727635059009132464449071229412620915141411885104944493670400399991607469175652649312166508729684479799355256827267462624509690026501540237029060059100565087840304334611533639727613290957355974634284347102141326010634662336154148700061656809037304988549742497857084140926139501530964069517264683903720647415685977297812978676660373340510143780214115838693089537587284858426950577228559900046005956054587497127493866680668187874038000049922936901418224701838913821352148523
e = 65537
c = 7699571448375799414919942200851222977843847395602970781311874148797204520682036970229462380848115958747849787555852116496793117606297030358609092150327571874624558538499409712184011788781279253256103661410138080324463421642707120475168488491757769057190839364577893054191548636910359046056424123991560389696800939050229350317463037728969434282010841691563530144193798131640581556067078209247402599600656954175882201827951564797451698963465085905275582199514431374718203550162430320826452781151077054583838806455613895133345369209185882334012992843720475343408581383650838502876653352132493526000088072607038319092318
m = b"LetsCTF{<REDACTED>}"
# mask      = 0101 0101 0101 ...0101
# mask << 1 = 1010 1010 1010 ...1010
# r = (p & mask) + (q &(mask << 1))
# Al sumarse no va a haber carry, porque los bits de p & mask y q & mask << 1 no se solapan


print(f"p  = {p}")
print(f"q  = {q}")


pa = ""
qa = ""
i = 0
for elem in bin(r).lstrip("0b"):
    if i % 2 == 0:
        pa+= elem
        qa+= '1'
    else:
        qa+= elem
        pa+= '1'
    i += 1


pa = int(pa,2)
qa = int(qa,2)


# pa = previous_prime(pa)
# qa = previous_prime(qa)


print(f"pa = {pa}")
print(f"qa = {qa}")



i=0
j=0
k=0
na = pa*qa
naux1=0
naux2=0
error = 0
previous_error = 0
while na!=n:
#    if naux2==na:
#        na = (naux2+naux1) // 2
#        print(na)
#        if k >= j:
#            error = abs(na-n)
#            print(error<previous_error, "->",previous_error-error)
#            j = k+10000
#            previous_error = error
#        if k >=j:
#            print(abs(n-na))


    naux2 = na
    i = 0
    while na>n:
        if i%2==1:
            pa = pa-2**i
        else:
            qa = qa-2**i
        na = pa*qa
        i = i+1
    
    naux1 = na
    i = 0
    while na<n:
        if i%2==1:
            pa = pa+2**i
        else:
            qa = qa+2**i
        na = pa*qa
        i = i+1
    k = k+1
    
    
    
    
    
print(na)

show("Son iguales?",n==na)

print(f"pa = {pa}")
print(f"qa = {qa}")


# print(f"n = {n}")
# print(f"e = {e}")
# print(f"c = {c}")
# print(f"r = {r}")


